// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getBlockConfigFromTypeScript official blocks action-button 1`] = `
{
  "actions": {
    "onClick": {
      "description": "Action that gets dispatched when the button is clicked.",
    },
  },
  "events": undefined,
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "icon": {
        "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.",
        "format": "fontawesome",
        "type": "string",
      },
      "title": {
        "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
        "format": "remapper",
      },
    },
    "required": [
      "icon",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks audio 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "onAudio": {
        "description": "The event to listen on for new data.

The result must be either a audio URL or an object containing a property \`url\`.",
      },
      "stop": {
        "description": "The event to stop listening to audio.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "src": {
        "description": "The source of the player. This can either be a URL pointing to a website, or it can point to an asset. The asset can either be the object, or the ID of the asset",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks button-list 1`] = `
{
  "actions": {
    "$any": {
      "description": "A custom action that gets dispatched when a button is clicked that has the same click action
specified as the name of this action.",
    },
    "onClick": {
      "description": "Action that gets dispatched when a button is clicked that doesn’t specify its own click
action.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

This data can be used with remap to display labels dynamically based on the received data.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "BulmaSize": {
        "enum": [
          "large",
          "medium",
          "normal",
          "small",
        ],
        "type": "string",
      },
      "Button": {
        "additionalProperties": false,
        "properties": {
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "description": "The Bulma color to use.",
          },
          "fullwidth": {
            "description": "Whether the button should be full width or not.

By default buttons only take up as much space as needed.",
            "type": "boolean",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.

Will not render if undefined.",
            "format": "fontawesome",
            "type": "string",
          },
          "inverted": {
            "description": "Whether the text and background colors should be inverted.",
            "type": "boolean",
          },
          "label": {
            "description": "The label to display.

Will not render if undefined.",
            "format": "remapper",
          },
          "light": {
            "description": "When set to true, the ‘light’ set of Bulma colors are used.",
            "type": "boolean",
          },
          "onClick": {
            "description": "The name of the action to trigger when the button is clicked.",
            "format": "action",
            "type": "string",
          },
          "outlined": {
            "description": "Whether the button should display its colors in the outlines.",
            "type": "boolean",
          },
          "rounded": {
            "description": "Whether the button should be rounded.",
            "type": "boolean",
          },
          "size": {
            "$ref": "#/definitions/BulmaSize",
            "description": "The size of the button. By default the size is ‘normal’.",
          },
          "title": {
            "description": "The title for the button.

Describe what the button does. This helps with accessibility for people using screen readers.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "buttons": {
        "description": "The list of buttons.",
        "items": {
          "$ref": "#/definitions/Button",
        },
        "type": "array",
      },
    },
    "required": [
      "buttons",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks chart 1`] = `
{
  "actions": {
    "onClick": {
      "description": "This action is launched whenever a user clicks on the chart canvas.

Returns the data of the clicked data in the format of \`label\`, \`data\`.

Returns an empty object if the user clicks outside of a data entry.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "add": {
        "description": "Add new data to the chart.

Refer to the block description for more information on the supported data format.",
      },
      "replace": {
        "description": "Replace all current data with the new data.

Refer to the block description for more information on the supported data format.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Color": {
        "description": "A hexadecimal color.",
        "pattern": "^#[a-fA-F\\d]{6}$",
        "type": "string",
      },
      "Font": {
        "additionalProperties": false,
        "properties": {
          "size": {
            "description": "The size of the label's font in px.",
            "type": "number",
          },
        },
        "required": [
          "size",
        ],
        "type": "object",
      },
      "LabelOptions": {
        "additionalProperties": false,
        "properties": {
          "font": {
            "$ref": "#/definitions/Font",
            "description": "Options for the font style for the labels on the horizontal axis.",
          },
          "maxWidth": {
            "description": "The maximum length (words) of the labels on the horizontal axis.",
            "type": "number",
          },
        },
        "required": [
          "font",
          "maxWidth",
        ],
        "type": "object",
      },
      "YAxis": {
        "additionalProperties": false,
        "properties": {
          "colors": {
            "default": [
              "#ededed",
            ],
            "description": "By default a grey tone is used.",
            "items": {
              "$ref": "#/definitions/Color",
            },
            "minItems": 1,
            "type": "array",
          },
          "max": {
            "description": "The maximum value to render on the vertical axis.

If not specified, the maximum value is determined automatically based on the values given.",
            "type": "number",
          },
          "min": {
            "default": 0,
            "description": "The minimal value to render on the vertical axis.",
            "type": "number",
          },
          "step": {
            "description": "If specified, the Y-axis of the chart will be incremented by this fixed amount.

By default it’s detected automatically.",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "backgroundColors": {
        "description": "The background colors to use for each dataset by default.

If the length of this array exceeds the number of labels, the pattern will be repeated.

By default the primary color of the theme will be used.",
        "items": {
          "format": "remapper",
        },
        "minItems": 1,
        "type": "array",
      },
      "labelOptions": {
        "$ref": "#/definitions/LabelOptions",
        "description": "Configuration options for the labels on the horizontal axis.",
      },
      "labels": {
        "description": "The labels to display at the bottom of the chart.",
        "items": {
          "format": "remapper",
        },
        "minItems": 1,
        "type": "array",
      },
      "type": {
        "default": "line",
        "description": "The chart type to render by default.",
        "enum": [
          "bar",
          "line",
        ],
        "type": "string",
      },
      "yAxis": {
        "$ref": "#/definitions/YAxis",
        "description": "Configuration options for the vertical axis.",
      },
    },
    "required": [
      "type",
      "yAxis",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks control-buttons 1`] = `
{
  "actions": {
    "onBack": {
      "description": "This action gets triggered then the back button is clicked.

It will be called with the page data.",
    },
    "onForward": {
      "description": "This action gets triggered then the back button is clicked.

It will be called with the page data.",
    },
  },
  "events": undefined,
  "messages": {
    "back": {
      "description": "The label that’s used on the back button.",
    },
    "forward": {
      "description": "The label that’s used on the forward button.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "Button": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to render on the button.

By default a cared pointing left or right respectively will be rendered.",
            "format": "fontawesome",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "back": {
        "anyOf": [
          {
            "$ref": "#/definitions/Button",
          },
          {
            "const": false,
            "type": "boolean",
          },
        ],
        "description": "The configuration for the back button.

Set to \`false\` to hide back button.",
      },
      "forward": {
        "anyOf": [
          {
            "$ref": "#/definitions/Button",
          },
          {
            "const": false,
            "type": "boolean",
          },
        ],
        "description": "The configuration for the forward button.

Set to \`false\` to hide forward button.",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks data-loader 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "Action that gets dispatched when a new filter gets applied.

This also gets called during the initial load.",
    },
  },
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted once the \`onLoad\` action has finished.

It can be triggered again by sending a \`refresh\` event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "When received, the \`onLoad\` action will be triggered using the parameters passed through this
event, which in turn triggers the \`data\` emit event.",
      },
    },
  },
  "messages": {
    "loadErrorMessage": {
      "description": "The error message that should be shown when data failed to load.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
      "skipInitialLoad": {
        "description": "By default the \`onLoad\` action is triggered immediately.

By setting this to \`true\`, this won’t happen.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks data-notifier 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": {
      "data": {
        "description": "Event that gets emitted when new data is available.",
      },
    },
    "listen": {
      "data": {
        "description": "The event to listen on for new data.",
      },
      "seed": {
        "description": "Set and emit the initial data.

This is useful for example in combination with the \`filter\` block.",
      },
    },
  },
  "messages": {
    "buttonLabel": {
      "description": "The label to display on the refresh button of the notification.",
    },
    "newMessage": {
      "description": "The message to display when new data is available.

This will be called with the \`count\` parameter, which refers to the amount of new items.",
    },
    "updatedMessage": {
      "description": "The message to display when existing data has been changed.

This will be called with the \`count\` parameter, which refers to the amount of changed items.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
    },
    "properties": {
      "color": {
        "$ref": "#/definitions/BulmaColor",
        "default": "dark",
        "description": "The Bulma color to use for the message and the refresh button.",
      },
      "id": {
        "default": "id",
        "description": "The property used to identify resources when comparing them in case of array data.",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks detail-viewer 1`] = `
{
  "actions": undefined,
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": undefined,
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AssetMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on an existing asset.",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "asset": {
            "description": "The id of an asset to use.",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "asset",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/FileField",
          },
          {
            "$ref": "#/definitions/GeoCoordinatesField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
        "description": "All supported types of fields.",
      },
      "FieldGroup": {
        "additionalProperties": false,
        "description": "A group of fields that is repeated for each item in it value.",
        "properties": {
          "fields": {
            "description": "The list of fields to repeat.",
            "items": {
              "$ref": "#/definitions/Field",
            },
            "type": "array",
          },
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "fields",
        ],
        "type": "object",
      },
      "FileField": {
        "additionalProperties": false,
        "description": "Displays files as images.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "repeated": {
            "description": "Display one or multiple files.",
            "type": "boolean",
          },
          "repeatedName": {
            "description": "The name of the property of the data to fetch from within each item.

If not set, the item itself is used as the url.",
            "format": "remapper",
          },
          "type": {
            "const": "file",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "FontAwesomeMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color to apply to the icon.",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
            "format": "fontawesome",
            "type": "string",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "GeoCoordinatesField": {
        "additionalProperties": false,
        "description": "Displays a map with a marker.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "latitude": {
            "description": "The name of the field used to access the longitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The name of the field used to access the latitude value.

If \`fields[].name\` is set it is retrieved relatively, otherwise it is fetched from the root of the data.",
            "format": "remapper",
          },
          "type": {
            "const": "geocoordinates",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The path to base the longitude and latitude fields from.

If \`fields[].latitude\` and \`fields[].longitude\` are not set it defaults to \`fields[].name.lat\` and \`fields[].name.lng\`.",
            "format": "remapper",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "StringField": {
        "additionalProperties": false,
        "description": "Displays the content as regular text.

If the content is an object it will be converted using \`JSON.stringify()\`.",
        "properties": {
          "label": {
            "description": "The label that is presented to the user. No label will be displayed if this is not defined.",
            "format": "remapper",
          },
          "type": {
            "const": "string",
            "description": "The name of the type of the field.",
            "type": "string",
          },
          "value": {
            "description": "The Remapper used to retrieve the data.",
            "format": "remapper",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields to display based on the name from the schema.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/Field",
            },
            {
              "$ref": "#/definitions/FieldGroup",
            },
          ],
        },
        "type": "array",
      },
      "fileBase": {
        "description": "The base URL of the associated files.

If not defined, Appsemble’s Asset API will be used instead.",
        "type": "string",
      },
      "icons": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetMarkerIcon",
          },
          {
            "$ref": "#/definitions/FontAwesomeMarkerIcon",
          },
        ],
        "description": "Custom icon configuration for geocoordinate fields.",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks feed 1`] = `
{
  "actions": {
    "onAvatarClick": {
      "description": "Action that gets dispatched when a user clicks on an avatar.",
    },
    "onButtonClick": {
      "description": "Action that gets dispatched when the button is clicked.

The button won't display if this is not defined.",
    },
    "onLoadReply": {
      "description": "Action to retrieve replies, dispatched on every feed item.",
    },
    "onSubmitReply": {
      "description": "Action that gets dispatched when submitting a reply.

When submitting replies, the data will be structured
as an object containing \`parentId\` and \`content\`.",
    },
  },
  "events": {
    "emit": undefined,
    "listen": {
      "data": {
        "description": "The event that is triggered when data is received.

Compatible data that is received will be displayed.",
      },
    },
  },
  "messages": {
    "anonymousLabel": {
      "description": "The name to display for replies without known user names.",
    },
    "emptyLabel": {
      "description": "The label that’s displayed when there are no feed items available.",
    },
    "replyErrorMessage": {
      "description": "The error message shown when an error occurs while submitting a reply.",
    },
    "replyLabel": {
      "description": "The placeholder text used for the reply input.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AssetMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on an existing asset.",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "asset": {
            "description": "The id of an asset to use.",
            "type": "string",
          },
          "latitude": {
            "description": "The latitude of the marker.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The longitude of the marker.",
            "format": "remapper",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "asset",
          "latitude",
          "longitude",
        ],
        "type": "object",
      },
      "BulmaColor": {
        "description": "A color known to Bulma.",
        "enum": [
          "danger",
          "dark",
          "info",
          "link",
          "primary",
          "success",
          "warning",
          "white",
        ],
        "type": "string",
      },
      "FontAwesomeMarkerIcon": {
        "additionalProperties": false,
        "description": "A marker based on a [Font Awesome icon](https://fontawesome.com/icons?m=free).",
        "properties": {
          "anchor": {
            "description": "The anchor X and Y offset used for positioning the image.

By default, the center of the icon will be used to mark the location. For many icons, it may be desirable to customize this. For example, for a symmetric pin which has a width of 10, and a  height of 16, you’ll probably want to set this to \`[5, 16]\`

The following special cases for [Font Awesome icon](https://fontawesome.com/icons?m=free) are treated in a special way, since they are often used to represent a location:

- \`map-marker\`
- \`map-marker-alt\`
- \`map-pin\`
- \`thumbtrack\`",
            "items": {
              "type": "number",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "color": {
            "$ref": "#/definitions/BulmaColor",
            "default": "primary",
            "description": "The color to apply to the icon.",
          },
          "icon": {
            "description": "A [Font Awesome icon](https://fontawesome.com/icons?m=free) name to use.",
            "format": "fontawesome",
            "type": "string",
          },
          "latitude": {
            "description": "The latitude of the marker.",
            "format": "remapper",
          },
          "longitude": {
            "description": "The longitude of the marker.",
            "format": "remapper",
          },
          "size": {
            "default": 28,
            "description": "The height of marker icons in pixels.",
            "type": "number",
          },
        },
        "required": [
          "latitude",
          "longitude",
        ],
        "type": "object",
      },
      "Reply": {
        "additionalProperties": false,
        "properties": {
          "author": {
            "default": [
              {
                "prop": "$author",
              },
              {
                "prop": "name",
              },
            ],
            "description": "The author of the reply.",
            "format": "remapper",
          },
          "content": {
            "default": {
              "prop": "content",
            },
            "description": "The content of the reply.",
            "format": "remapper",
          },
          "parentId": {
            "description": "The field that is used to associate the ID of the resource this reply belongs to.",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "buttonLabel": {
        "description": "The text that displays inside the button.",
        "type": "string",
      },
      "description": {
        "description": "The description or content of the card.",
        "format": "remapper",
      },
      "heading": {
        "description": "The heading displayed on the card.",
        "format": "remapper",
      },
      "marker": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetMarkerIcon",
          },
          {
            "$ref": "#/definitions/FontAwesomeMarkerIcon",
          },
        ],
        "description": "The location marker that is displayed on the card.",
      },
      "picture": {
        "description": "The highlighted picture.",
        "format": "remapper",
      },
      "pictureBase": {
        "description": "The base URL used to display pictures.

If not defined, the Asset API will be used instead.",
        "type": "string",
      },
      "pictures": {
        "description": "A list of pictures that are displayed below the highlighted picture.",
        "format": "remapper",
      },
      "reply": {
        "$ref": "#/definitions/Reply",
        "description": "The definition used to display replies.",
      },
      "subtitle": {
        "description": "The subtitle displayed on the card.",
        "format": "remapper",
      },
      "title": {
        "description": "The title displayed on the card.",
        "format": "remapper",
      },
    },
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks filter 1`] = `
{
  "actions": {
    "onLoad": {
      "description": "The action to dispatch to load data. Typically this is a \`resource.query\` action.",
    },
  },
  "events": {
    "emit": {
      "filtered": {
        "description": "This event is emitted when new data is available because of a user interaction with filters.",
      },
      "refreshed": {
        "description": "This event is emitted when new data is available because of a refresh event.",
      },
    },
    "listen": {
      "refresh": {
        "description": "Force reload data using the current filters.",
      },
    },
  },
  "messages": {
    "clearLabel": {
      "description": "The label of the clear button.",
    },
    "modalTitle": {
      "description": "The title of the modal.",
    },
    "submitLabel": {
      "description": "The label of the filter button.",
    },
  },
  "parameters": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "AbstractField<"date",string>": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "date",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "ButtonOption": {
        "additionalProperties": false,
        "properties": {
          "icon": {
            "description": "An icon to render on the button.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "User-facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "required": [
          "value",
          "icon",
        ],
        "type": "object",
      },
      "ButtonsField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "options": {
            "description": "A list of button options.",
            "items": {
              "$ref": "#/definitions/ButtonOption",
            },
            "type": "array",
          },
          "type": {
            "const": "buttons",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "options",
          "type",
        ],
        "type": "object",
      },
      "DateField": {
        "$ref": "#/definitions/AbstractField%3C%22date%22%2Cstring%3E",
      },
      "DateRangeField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "items": {
              "type": "string",
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "fromLabel": {
            "description": "The label to render on the \`from\` field.",
            "format": "remapper",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "toLabel": {
            "description": "The label to render on the \`to\` field.",
            "format": "remapper",
          },
          "type": {
            "const": "date-range",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "enum": {
            "description": "A list of enum options.",
            "items": {
              "$ref": "#/definitions/EnumOption",
            },
            "type": "array",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "enum",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "enum",
          "name",
          "type",
        ],
        "type": "object",
      },
      "EnumOption": {
        "additionalProperties": false,
        "properties": {
          "label": {
            "description": "User facing label describing the option.",
            "format": "remapper",
          },
          "value": {
            "description": "The value that gets submitted when filtering.",
            "type": "string",
          },
        },
        "type": "object",
      },
      "Field": {
        "anyOf": [
          {
            "$ref": "#/definitions/ButtonsField",
          },
          {
            "$ref": "#/definitions/DateField",
          },
          {
            "$ref": "#/definitions/DateRangeField",
          },
          {
            "$ref": "#/definitions/EnumField",
          },
          {
            "$ref": "#/definitions/StringField",
          },
        ],
      },
      "StringField": {
        "additionalProperties": false,
        "properties": {
          "defaultValue": {
            "description": "The filter to apply by default.",
            "type": "string",
          },
          "exact": {
            "description": "By default string fields search for fields containing the user input.

By setting this to true, an exact match is used.",
            "type": "boolean",
          },
          "icon": {
            "description": "Name of the [Font Awesome icon](https://fontawesome.com/icons?m=free) to be displayed next to the label.",
            "format": "fontawesome",
            "type": "string",
          },
          "label": {
            "description": "The label displayed next to the field.",
            "format": "remapper",
          },
          "name": {
            "description": "The name of the field to filter on.",
            "type": "string",
          },
          "type": {
            "const": "string",
            "description": "The type of the filter field.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
        ],
        "type": "object",
      },
    },
    "properties": {
      "fields": {
        "description": "A list of fields the user is allowed to search on.",
        "items": {
          "$ref": "#/definitions/Field",
        },
        "type": "array",
      },
      "highlight": {
        "description": "The name of a field to highlight.

This means this field will be displayed directly on the screen instead of in the modal.",
        "type": "string",
      },
    },
    "required": [
      "fields",
    ],
    "type": "object",
  },
}
`;

exports[`getBlockConfigFromTypeScript official blocks form 1`] = `
{
  "actions": {
    "$any": {
      "description": "A custom action that gets dispatched when checking form requirements.",
    },
    "onPrevious": {
      "desc